# -*- coding: utf-8 -*-
"""
/***************************************************************************
 D2SBrowser
                                 A QGIS plugin
 This plugin allows you to browse your data on a D2S instance.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-06-10
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Geospatial Data Science Lab
        email                : jinha@purdue.edu
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.core import Qgis, QgsMessageLog, QgsProject, QgsRasterLayer
from qgis.gui import QgsMessageBar

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QDialogButtonBox, QListWidgetItem, QSizePolicy

# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the dialog
from .d2s_browser_dialog import D2SBrowserDialog
import os.path


# Install d2spy pkg
try:
    from d2spy.auth import Auth
    from d2spy.workspace import Workspace
except (ImportError, ModuleNotFoundError):
    import os
    import sys

    base_path = os.path.dirname(os.path.realpath(__file__))
    whl_path = os.path.join(base_path, "d2spy-0.0.8-py3-none-any.whl")
    sys.path.append(whl_path)

    from d2spy.auth import Auth
    from d2spy.workspace import Workspace


class D2SBrowser:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value("locale/userLocale")[0:2]
        locale_path = os.path.join(
            self.plugin_dir, "i18n", "D2SBrowser_{}.qm".format(locale)
        )

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr("&D2S Browser")

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

        # D2S workspace for authorized user
        self.workspace = None

        # API key for authorized user
        self.api_key = ""

        # Store projects returned from API
        self.projects = []

        # Store flights returned from API
        self.flights = []

        # Store data products returned from API
        self.data_products = []

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate("D2SBrowser", message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None,
    ):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(self.menu, action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ":/plugins/d2s_browser/icon.png"
        self.add_action(
            icon_path,
            text=self.tr("Browse D2S data"),
            callback=self.run,
            parent=self.iface.mainWindow(),
        )

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(self.tr("&D2S Browser"), action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = D2SBrowserDialog()

            # EVENTS

            # Event when login button clicked
            self.dlg.loginPushButton.clicked.connect(self.login)
            # Event when project combobox changed
            self.dlg.projectsComboBox.currentIndexChanged.connect(self.update_flights)
            # Event when flight combobox changed
            self.dlg.flightsComboBox.currentIndexChanged.connect(
                self.update_data_products
            )
            # Event when project refresh button clicked
            self.dlg.projectsRefreshPushButton.clicked.connect(self.update_projects)
            # Event when add to map button clicked
            self.dlg.dataProductsPushButton.clicked.connect(
                self.add_data_products_to_map
            )

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass

    def login(self):
        """Login to D2S instance using server, email, and password collected from UI."""
        # Clear existing projects
        self.dlg.projectsComboBox.clear()

        # Get credentials from form fields
        server = self.dlg.serverLineEdit.text()
        email = self.dlg.emailLineEdit.text()
        password = self.dlg.passwordLineEdit.text()

        # Login to D2S instance using provided credentials
        auth = Auth(server)
        session = auth.login(email, password)

        if not session:
            self.iface.messageBar().pushMessage(
                "Error",
                "Unable to sign in with provided credentials",
                level=Qgis.Critical,
                duration=10,
            )
            return

        # Get user model
        user = auth.get_current_user()

        # Check for API key
        if "api_access_token" not in user or user["api_access_token"] is None:
            self.iface.messageBar().pushMessage(
                "Warning",
                "Please request an API key from the D2S profile page.",
                level=Qgis.Warning,
                duration=10,
            )
        else:
            self.api_key = user["api_access_token"]

        # Create a workspace
        workspace = Workspace(server, session)
        self.workspace = workspace

        # Get user projects
        self.update_projects()

    def update_projects(self):
        """Fetch user's projects from D2S instance and update projects UI combobox."""
        # Clear current projects
        self.dlg.projectsComboBox.clear()

        # Get and add user projects
        self.projects = self.workspace.get_projects()
        if len(self.projects) > 0:
            # Sort projects by title a - z
            self.projects = sorted(
                self.projects, key=lambda project: project.title.lower()
            )
            # Add projects to combobox
            self.dlg.projectsComboBox.addItems(
                [project.title for project in self.projects]
            )
            # Get user flights for first project
            self.update_flights()
        else:
            # No projects, clear current flights and data products
            self.dlg.flightsComboBox.clear()
            self.dlg.dataProductsListWidget.clear()

    def update_flights(self):
        """Fetch flights from selected project and update flights UI combobox."""
        # Clear current flights
        self.dlg.flightsComboBox.clear()

        # Currently selected project
        selected_project = self.projects[self.dlg.projectsComboBox.currentIndex()]

        # Get flights for selected project
        self.flights = selected_project.get_flights()

        # Sort by acquisition date
        self.flights = sorted(
            self.flights, key=lambda flight: flight.acquisition_date, reverse=True
        )

        # Add flights (if any) to combobox
        if len(self.flights) > 0:
            self.dlg.flightsComboBox.addItems(
                [flight.acquisition_date for flight in self.flights]
            )
            # Update data products
            self.update_data_products()
        else:
            # No flights, clear current data products
            self.dlg.dataProductsListWidget.clear()

    def update_data_products(self):
        """Fetch data products from selected flight and update data products UI list."""
        # Clear current data products
        self.dlg.dataProductsListWidget.clear()

        # Currently selected flight
        selected_flight = self.flights[self.dlg.flightsComboBox.currentIndex()]

        # Get user data products for flight
        all_data_products = selected_flight.get_data_products()
        # Filter out any non-raster data products (e.g., point clouds)
        self.data_products = [
            data_product
            for data_product in all_data_products
            if data_product.data_type != "point_cloud"
        ]
        # Sort by data type
        self.data_products = sorted(
            self.data_products, key=lambda data_product: data_product.data_type
        )

        if len(self.data_products) > 0:
            # Create list item for each data product
            for index, data_product in enumerate(self.data_products):
                # Add data product to list with unchecked checkbox
                item = QListWidgetItem(data_product.data_type)
                item.setFlags(item.flags() | Qt.ItemIsUserCheckable)
                item.setCheckState(Qt.Unchecked)

                # Add data product list item to list widget
                self.dlg.dataProductsListWidget.addItem(item)

    def add_data_products_to_map(self):
        """Add data products selected in data products UI list to map."""
        # Iterate over each data product and add urls for checked data products in list
        for index in range(self.dlg.dataProductsListWidget.count()):
            item = self.dlg.dataProductsListWidget.item(index)
            if item.checkState() == Qt.Checked:
                # Get url for data product
                layer_name = self.data_products[index].data_type
                url = self.data_products[index].url
                # Create raster layer and add to map
                raster_layer = QgsRasterLayer(
                    f"/vsicurl/{url}?API_KEY={self.api_key}", layer_name
                )
                if raster_layer.isValid():
                    QgsProject().instance().addMapLayer(raster_layer)
                else:
                    self.iface.messageBar().pushMessage(
                        "Warning",
                        f"Invalid url: {url}",
                        level=Qgis.Warning,
                        duration=5,
                    )

        # Zoom to last added layer
        self.iface.zoomToActiveLayer()
        self.iface.mapCanvas().refresh()
